"use client";

import { yupResolver } from "@hookform/resolvers/yup";
import { useQuery } from "@tanstack/react-query";
import * as _ from "lodash";
import { useForm } from "react-hook-form";
import * as yup from "yup";
import { getAllPhotos } from "../apis";
import { IPhoto, IPhotoWithIdAndAlbumId } from "../interfaces";
import { PhotoDto } from "../schemas";

interface PhotoModalProps {
  isOpen: boolean;
  closeModal: () => void;
  addPhoto: (photo: PhotoDto) => void;
}

const schema = yup.object().shape({
  title: yup.string().required("Title is required"),
  url: yup.string().url("Must be a valid URL").required("URL is required"),
});

export const PhotoModal: React.FC<PhotoModalProps> = ({
  isOpen,
  closeModal,
  addPhoto,
}) => {
  const {
    data: allPhotos,
    refetch,
    isFetching,
  } = useQuery<IPhoto[]>({
    queryKey: ["photos"],
    queryFn: getAllPhotos,
  });

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<PhotoDto>({
    resolver: yupResolver(schema),
  });

  const onSubmit = (data: PhotoDto) => {
    const photo: IPhotoWithIdAndAlbumId = {
      ...data,
      id: newId!, // ID will be autogenerated
      albumId: generateRandomAlbumId(), // Generate a random album ID
    };
    addPhoto(photo); // Pass the photo to the parent component
    refetch();
    closeModal(); // Close the modal after submission
  };

  const generatedId = (existingIds: number[]) => {
    if (!existingIds || existingIds.length === 0) {
      return 1; // Start from 1 if no photos exist
    }
    const maxId = Math.max(...existingIds);
    return maxId + 1;
  };

  const existingIds: number[] = _.map(allPhotos, (photo) => photo.id) || [];
  const newId = !isFetching ? generatedId(existingIds) : undefined;
  const generateRandomAlbumId = () => Math.floor(Math.random() * 9) + 1;

  return (
    <div className={`fixed inset-0 z-50 ${isOpen ? "block" : "hidden"}`}>
      <div
        className="fixed inset-0 bg-black bg-opacity-50"
        onClick={closeModal}
      />
      <div className="fixed inset-0 flex items-center justify-center">
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-sm">
          <h3 className="text-lg font-medium leading-6 text-gray-900">
            Add Photo
          </h3>
          <form onSubmit={handleSubmit(onSubmit)} className="mt-4 space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Title
              </label>
              <input
                type="text"
                {...register("title")}
                className="mt-1 block w-full border-gray-300 rounded-md shadow-sm"
              />
              {errors.title && (
                <p className="text-red-500 text-xs">{errors.title.message}</p>
              )}
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                URL
              </label>
              <input
                type="text"
                {...register("url")}
                className="mt-1 block w-full border-gray-300 rounded-md shadow-sm"
              />
              {errors.url && (
                <p className="text-red-500 text-xs">{errors.url.message}</p>
              )}
            </div>
            <div className="flex justify-end space-x-2">
              <button
                type="button"
                onClick={closeModal}
                className="inline-flex justify-center rounded-md border border-transparent bg-gray-500 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-gray-600"
              >
                Cancel
              </button>
              <button
                type="submit"
                className="inline-flex justify-center rounded-md border border-transparent bg-blue-500 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-600"
              >
                Add Photo
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};
